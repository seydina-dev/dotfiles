#!/bin/sh

fmag() {
	echo ${1} | cut -d "&" -f1 | cin
}

cddd() {
	rust_filters=".rustup|.cargo|debug"
	node_filters=".npm"
	git_filters=".git"
	cache_filters=".cache"

	FZF_OPTIONS="--reverse --border --height 40%"	
	# cd "$(find $HOME/ -type d)"
	cd "$(find $HOME/ -type d | grep -vE "${cache_filters}|${node_filters}|${rust_filters}|${git_filters}" y| fzf ${FZF_OPTIONS})"

}

cdd() {
	cd $(fd --full-path $HOME --type d | fzf --reverse --border --height 40%)
}

open() {
	xdg-open "$(find -type f | fzf)" 	
}

ssid(){
	nmcli dev wifi|cut -b 9- |sed -n '1!p'| fzf --reverse |awk '{print $2}'|tr -d '\n'|xclip -selection c
}

 
ghc(){
	gc "git@github.com:${1}/${2}.git"
}

glc(){
	gc "git@gitlab.com:${1}/${2}.git"
}

git-ssh() {
	git remote set-url origin git@github.com:sedev077/${1}.git
}

mcopy(){
	
	copy $(ls | fzf --reverse -m --prompt='files to copy: ') $1
	#awk '{print "\047" $0 "\047"}' files > fcopy
	#rsync --progress --ignore-existing -rhav

}

mdel(){
    for f in "$(ls -a|sort|sed -n '1,2!p'|fzf --reverse -m)"
    do
        printf "$f\n" >> f
    done

    while read -r line; do
        rm -rf "$line"
    done < f
    rm f
}

# # ex - archive extractor
# # usage: ex <file>

ex(){
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "$1 cannot be extracted via ex()" ;;
    esac
  else
    echo "${1} is not a valid file"
  fi
}

setres() {
	xrandr --output LVDS-1 --scale "1.4055x1.4062"
}

ggc(){
  read -p "Enter your name: " name
  read -p "Enter your email: " email
	git config --global user.name "$name"
	git config --global user.email "$email"
}
